{"version":3,"sources":["../src/Infra/Http/Express.ts","../src/Core/UseCase/UserUseCase.ts","../src/Infra/Presenters/UserPresenter.ts","../src/Infra/Repositories/User/UserRepository.ts","../src/Core/Domain/Primitives/AggregateRoot.ts","../src/Core/Domain/User/User.ts","../src/Infra/Controller/UserController.ts","../src/index.ts"],"sourcesContent":["import express from \"express\";\r\nimport cors from \"cors\";\r\nimport session from \"express-session\";\r\nimport UserController from \"../Controller/UserController\";\r\n\r\nexport default class Express {\r\n    private app: express.Express;\r\n    private userController: UserController;\r\n    constructor() {\r\n        let app = this.app = express();\r\n        this.userController = new UserController();\r\n\r\n        const sessionParser = session({\r\n            saveUninitialized: false,\r\n            secret: '$eCuRiTy',\r\n            resave: false\r\n        });\r\n\r\n        app.use(cors({\r\n            origin: \"http://localhost:*\"\r\n        }));\r\n\r\n        app.use(express.static('public'));\r\n        app.use(sessionParser);\r\n\r\n        app.use(\"/user\", this.userController.Router);\r\n        app.listen(8080);\r\n\r\n    }\r\n};\r\n","import User from \"../Domain/User/User\";\r\nimport IUserRepository from \"../Repositories/IUserRepository\";\r\n\r\nexport default class UserUseCase {\r\n\r\n    private repo: IUserRepository\r\n\r\n    constructor(repo: IUserRepository) {\r\n        this.repo = repo;\r\n    }\r\n\r\n    public async Guest<T>(name: string, presenter: IUserPresenter<T>) {\r\n        let user = await this.repo.Create(name);\r\n        return presenter.Success(user);\r\n    }\r\n}\r\n\r\nexport interface IUserPresenter<T> {\r\n    Success(user: User): T;\r\n}\r\n","import User from \"../../Core/Domain/User/User\";\r\nimport { IUserPresenter } from \"../../Core/UseCase/UserUseCase\";\r\n\r\nexport default class UserPresenter implements IUserPresenter<{ name: string, id: string }> {\r\n\r\n    Success(user: User) {\r\n        return { name: user.Name, id: user.Id };\r\n    }\r\n}","import { nanoid } from \"nanoid\";\r\nimport User from \"../../../Core/Domain/User/User\";\r\nimport IUserRepository from \"../../../Core/Repositories/IUserRepository\";\r\n\r\nexport default class UserRepository implements IUserRepository {\r\n\r\n    Create(name: string): User {\r\n        let user = new User(nanoid(6), name);\r\n        return user;\r\n    }\r\n}","export default class AggregateRoot {\r\n    private id: string;\r\n    constructor(id: string) {\r\n        this.id = id;\r\n    }\r\n\r\n    public get Id(): string { return this.id; }\r\n\r\n}","import AggregateRoot from \"../Primitives/AggregateRoot\";\r\n\r\nexport default class User extends AggregateRoot {\r\n    private name: string;\r\n    constructor(id: string, name: string) {\r\n        super(id);\r\n        this.name = name;\r\n    }\r\n\r\n    public get Name(): string { return this.name; }\r\n\r\n}","import UserUseCase from \"../../Core/UseCase/UserUseCase\";\r\nimport UserPresenter from \"../Presenters/UserPresenter\";\r\nimport UserRepository from \"../Repositories/User/UserRepository\";\r\nimport Express, { Router } from \"express\";\r\n\r\n\r\nexport default class UserController {\r\n\r\n    private userUsecase: UserUseCase;\r\n    private router: Router;\r\n\r\n    constructor() {\r\n        this.userUsecase = new UserUseCase(new UserRepository());\r\n        this.router = Router();\r\n\r\n        this.router.param(\"name\", (req, res, next, value) => this.Validator(req, res, next, value));\r\n        this.router.get(\"/:name\", (req, res) => this.Guest(req, res));\r\n    }\r\n\r\n    public get Router(): Router { return this.router; }\r\n\r\n    private Validator(req: Express.Request, res: Express.Response, next: Function, value: string) {\r\n\r\n        console.log(req.params, value);\r\n\r\n        if (typeof value != \"string\") {\r\n            res.status(400).json('Invalid request');\r\n            return;\r\n        }\r\n        next();\r\n    }\r\n\r\n    private async Guest(req: Express.Request | any, res: Express.Response) {\r\n\r\n        let user = await this.userUsecase.Guest(req.params.name, new UserPresenter());\r\n        req.session.user = user;\r\n        res.json(user);\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// const userUsecase = new UserUseCase(new UserRepository());\r\n// const userRouter = Router();\r\n\r\n// export async function Guest(req: Express.Request | any, res: Express.Response) {\r\n\r\n//     if (!req.body || !req.body.name) {\r\n//         res.status(400).json({ message: 'Invalid request' });\r\n//         return;\r\n//     }\r\n\r\n//     let user = await userUsecase.Guest(req.body.name, new UserPresenter());\r\n//     req.session.user = user;\r\n//     res.json(user);\r\n// }\r\n\r\n","import Express from \"./Infra/Http/Express\";\r\n\r\nlet app = new Express();"],"mappings":"qqBAAA,IAAAA,EAAoB,sBACpBC,EAAiB,mBACjBC,EAAoB,8BCCpB,IAAqBC,EAArB,KAAiC,CAI7B,YAAYC,EAAuB,CAC/B,KAAK,KAAOA,CAChB,CAEa,MAASC,EAAcC,EAA8B,QAAAC,EAAA,sBAC9D,IAAIC,EAAO,MAAM,KAAK,KAAK,OAAOH,CAAI,EACtC,OAAOC,EAAU,QAAQE,CAAI,CACjC,GACJ,ECZA,IAAqBC,EAArB,KAA2F,CAEvF,QAAQC,EAAY,CAChB,MAAO,CAAE,KAAMA,EAAK,KAAM,GAAIA,EAAK,EAAG,CAC1C,CACJ,ECRA,IAAAC,EAAuB,kBCAvB,IAAqBC,EAArB,KAAmC,CAE/B,YAAYC,EAAY,CACpB,KAAK,GAAKA,CACd,CAEA,IAAW,IAAa,CAAE,OAAO,KAAK,EAAI,CAE9C,ECNA,IAAqBC,EAArB,cAAkCC,CAAc,CAE5C,YAAYC,EAAYC,EAAc,CAClC,MAAMD,CAAE,EACR,KAAK,KAAOC,CAChB,CAEA,IAAW,MAAe,CAAE,OAAO,KAAK,IAAM,CAElD,EFPA,IAAqBC,EAArB,KAA+D,CAE3D,OAAOC,EAAoB,CAEvB,OADW,IAAIC,KAAK,UAAO,CAAC,EAAGD,CAAI,CAEvC,CACJ,EGPA,IAAAE,EAAgC,mBAGhC,IAAqBC,EAArB,KAAoC,CAKhC,aAAc,CACV,KAAK,YAAc,IAAIC,EAAY,IAAIC,CAAgB,EACvD,KAAK,UAAS,UAAO,EAErB,KAAK,OAAO,MAAM,OAAQ,CAACC,EAAKC,EAAKC,EAAMC,IAAU,KAAK,UAAUH,EAAKC,EAAKC,EAAMC,CAAK,CAAC,EAC1F,KAAK,OAAO,IAAI,SAAU,CAACH,EAAKC,IAAQ,KAAK,MAAMD,EAAKC,CAAG,CAAC,CAChE,CAEA,IAAW,QAAiB,CAAE,OAAO,KAAK,MAAQ,CAE1C,UAAUD,EAAsBC,EAAuBC,EAAgBC,EAAe,CAI1F,GAFA,QAAQ,IAAIH,EAAI,OAAQG,CAAK,EAEzB,OAAOA,GAAS,SAAU,CAC1BF,EAAI,OAAO,GAAG,EAAE,KAAK,iBAAiB,EACtC,MACJ,CACAC,EAAK,CACT,CAEc,MAAMF,EAA4BC,EAAuB,QAAAG,EAAA,sBAEnE,IAAIC,EAAO,MAAM,KAAK,YAAY,MAAML,EAAI,OAAO,KAAM,IAAIM,CAAe,EAC5EN,EAAI,QAAQ,KAAOK,EACnBJ,EAAI,KAAKI,CAAI,CACjB,GAEJ,ENlCA,IAAqBE,EAArB,KAA6B,CAGzB,aAAc,CACV,IAAIC,EAAM,KAAK,OAAM,EAAAC,SAAQ,EAC7B,KAAK,eAAiB,IAAIC,EAE1B,IAAMC,KAAgB,EAAAC,SAAQ,CAC1B,kBAAmB,GACnB,OAAQ,WACR,OAAQ,EACZ,CAAC,EAEDJ,EAAI,OAAI,EAAAK,SAAK,CACT,OAAQ,oBACZ,CAAC,CAAC,EAEFL,EAAI,IAAI,EAAAC,QAAQ,OAAO,QAAQ,CAAC,EAChCD,EAAI,IAAIG,CAAa,EAErBH,EAAI,IAAI,QAAS,KAAK,eAAe,MAAM,EAC3CA,EAAI,OAAO,IAAI,CAEnB,CACJ,EO3BA,IAAIM,EAAM,IAAIC","names":["import_express","import_cors","import_express_session","UserUseCase","repo","name","presenter","__async","user","UserPresenter","user","import_nanoid","AggregateRoot","id","User","AggregateRoot","id","name","UserRepository","name","User","import_express","UserController","UserUseCase","UserRepository","req","res","next","value","__async","user","UserPresenter","Express","app","express","UserController","sessionParser","session","cors","app","Express"]}